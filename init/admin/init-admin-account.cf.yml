---
# https://www.terraform.io/docs/backends/types/s3.html
AWSTemplateFormatVersion: '2010-09-09'
Description: Initialize terraform admin account
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Terraform State Resources
        Parameters:
          - StateBucketName
          - LockTableName
Parameters:
  StateBucketName:
    Type: String
    Description: Name of the terraform state S3 bucket
  LockTableName:
    Type: String
    Description: Name of the terraform DynamoDB lock table

Resources:
  TerraformStateReadWritePolicy:
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      ManagedPolicyName: TerraformStateReadWrite
      Path: /terraform/
      Description: Read/write access to terraform state
      PolicyDocument:
        Version: 2012-10-17
        # Permissions are based on:
        # https://www.terraform.io/docs/backends/types/s3.html#example-configuration
        # https://github.com/gruntwork-io/terragrunt/issues/919
        Statement:
          - Effect: Allow
            Action:
              - 's3:ListBucket'
              - 's3:GetBucketVersioning'
            Resource: !Sub "arn:aws:s3:::${StateBucketName}"
          - Effect: Allow
            Action:
              - 's3:GetObject'
              - 's3:PutObject'
            Resource: !Sub "arn:aws:s3:::${StateBucketName}/*"
          - Effect: Allow
            Action:
              - 'dynamodb:DescribeTable'
              - 'dynamodb:GetItem'
              - 'dynamodb:PutItem'
              - 'dynamodb:DeleteItem'
            Resource: !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${LockTableName}"

  TerraformBackendRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Ref AWS::AccountId
            Action:
              - 'sts:AssumeRole'
            Condition:
              StringEquals:
                aws:PrincipalType: User
                aws:RequestTag/CallerIdentity: "${aws:PrincipalArn}"
              StringLike:
                'aws:PrincipalTag/Terraform': '*'
          - Effect: Allow
            Principal:
              AWS: !Ref AWS::AccountId
            Action:
              - 'sts:TagSession'
            Condition:
              # Require there be at least one transitive tag passed
              # https://docs.amazonaws.cn/en_us/IAM/latest/UserGuide/id_session-tags.html
              "Null":
                sts:TransitiveTagKeys: false
              # Only allow the CallerIdentity tag to be passed as transitive
              # This combined with the previous requires the request to have
              # the CallerIdentity tag passed transitively
              # https://docs.amazonaws.cn/en_us/IAM/latest/UserGuide/id_session-tags.html
              ForAllValues:StringEquals:
                sts:TransitiveTagKeys:
                  - CallerIdentity
              # Require the CallerIdentity be set to the AWS user's ARN
              # https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_variables.html
              StringEquals:
                aws:PrincipalType: User
                aws:RequestTag/CallerIdentity: "${aws:PrincipalArn}"

      RoleName: TerraformBackend
      Path: /terraform/
      ManagedPolicyArns:
        - !Ref TerraformStateReadWritePolicy
